-------------------------------------------
当一个变量前面有了static这个修饰符，
内存会为它分配唯一的一块存储空间。程序跑起来的时候，
变量就存在在内存里了。谁要用它，就去访问一下它所在的内存。
假如内存是澡堂子，static变量就像一坨肥皂，一整个澡堂子的人都共用之。。
不管澡堂子里有没有人，肥皂总是在这里。编译器想拿出肥皂来玩一玩，直接吼出肥皂的名字就好了。
如果这是一个非static的变量，则是对每个对象有一份存储空间。程序跑刚起来的时候，是没有这个变量的。
相当于一个澡堂子里每个人都有一坨肥皂。如果没有人，也就没有肥皂。编译器想要用肥皂来做点什么，
必须先制造一个手持肥皂的人。

作者：张唯佳
链接：https://www.zhihu.com/question/23168955/answer/28422467
来源：知乎


parseInt() 方法用于将字符串参数作为有符号的十进制整数进行解析。

如果方法有两个参数， 使用第二个参数指定的基数，将字符串参数解析为有符号的整数。


InputStream ： 是所有字节输入流的超类，一般使用它的子类：FileInputStream等，它能输出字节流；
InputStreamReader ： 是字节流与字符流之间的桥梁，能将字节流输出为字符流，并且能为字节流指定字符集，可输出一个个的字符；
BufferedReader ： 提供通用的缓冲方式文本读取，readLine读取一个文本行， 从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。

BufferedReader 的 readLine()方法读取字符时会一次读取一行字符（不包括换行符号）
BufferedWriter 的 newLine（）方法可以输出一个跨平台的换行符号 “\r\n”

BufferedReader read()方法读取字符时会一次读取若干字符到缓冲区，然后逐个返回给程序，降低读取文件的次数，提高效率
BufferedWriter write()方法写出字符时会先写到缓冲区，缓冲区写满时才会写到文件，降低写文件的次数，提高效率


---------------------------------
构造方法直接在new的时候就调用了，不需要再重新调用。比如下面的例子这里不用再 p.Person（）
假设我们创建了一个class Person{
	private String name;
	private int age;
	
	public Person(){
	
	//构造方法
	name = "张三";
	age = 23;
	}
	
	public void show(){
		System.out.println(name + "...." + age);
	}
}
然后主程序里我创建对象
Person p = new Person();
p.show();
那么如果我再次创建对象，问题来了，我又写一次
Person p = new Person();
p.show();
但是这里新创建的对象还是张三。所以这么写构造方法不好，就最好用带参数的构造方法来初始化对象。


	public Person(String name, int age){
		this.name = name;
		this.age = age;
		System.out.println("有参数的构造");
	}
构造方法其实就是初始化，我们可以不用带参数的构造方法，然后后面可以用set方法进行改变，setXXX更灵活

----------------------------
this关键字最大的作用就是让类中的一个方法，访问该类中另一个方法或实例变量。
this在构造器中代表该构造器正在初始化的对象。

public class Dog
{
    public void jump(){
        system.out.println("正在执行jump（）方法");
    }

    public void run(){
        //this 引用调用run（）方法中的对象
        //this代表run（）对象
        this.jump();
    }
}

-----------------------------
创建对象的过程内存怎么做的。可见图创建对象.jpg
 Student s = new Student()
1.Student.class 加载进内存
2.声明一个Student类型引用
3.在堆内存中创建对象
4.给对象属性默认初始化值（比如String是null int是0）
5.属性进行显示初始化（比如我们在Student里面定义的是 String name = '张三'，那么null就初始化为张三）
6.构造方法进栈，对对象中的属性赋值（this.name=XXX），赋值完后，构造方法完事了出栈
7.将对象的地址值赋值s



-----------------------------
Static的作用 见静态static.jpg
特点：
a.随着类的加载而加载
b.优先于对象存在 意思是现在类.class里面加载静态区，然后才去创建对象
c.被类的所有对象共享
	*举例：一个班的学生共用同一个班级编号
	也就是说如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的
	比如：饮水机（静态修饰)
		  水杯（不能用静态修饰）
可以用类名.静态变量 进行赋值
也可以用对象.静态变量 进行赋值
但是非静态不能用类名.变量



-----------------------------
整数类型：byte，short，int，long默认初始化值都是0
浮点类型:float, double 默认初始化值都是0.0
布尔类型：boolean是false
字符类型：char 默认初始化值是'\u0000' 反斜杠代表转移字符 u是unicode（java是unicode编码）
          char在内存中占两个字节，是16个二进制位
          \u0000，每一个0其实代表的是16进制的0，那么四个0就是代表16个二进制位
          
          
          
----------------------------
A：栈 pile
存储局部变量
局部变量：定义在方法声明上和方法中的变量

B：堆 tas
存储new出来的数组或对象


-----------------------------
关于多态
比如我们有一个父类Father 一个他的子类Son
public class Father{
	int num = 10;
}

class Son extends Father{
	int num = 20;
}

Father f = new Son();
f.print()
System......(f.num)出来的结果是什么呢？
是10
原因是因为我们在子类里面有两个num
一个num=10 是在super里面看到的父类的
一个num=20 是son自己的。 而我们这里父类只能看到super不能看到son的 所以会显示20

成员变量
编译看左边（父类），运行看左边（父类）

成员方法
编译看左边（父类），运行看右边（子类）


f.print()打印的是son类下的print因为
编译的时候看的是父类里面有没有这个方法，但是执行的时候是看子类有没有。
这个就叫动态绑定
但是如果这个方法定义为了静态，那还是会看父类的

多态的好处是：
提高了代码的维护性（继承保证）
提高了代码的扩展性 （由多态保证）
弊端：
不能使用子类的特有属性和行为

Animal a
a instanceof Cat 判断前面的引用是否是后面的数据类型



----------------------------Apnne3
先是学习了fabrique 用一个Interface
Sequence nouvelle();
但是没有实例化。
再用两个class 实现这个interface
里面有其具体的方法
	public Sequence nouvelle() {
		return new SequenceListe();
	}
然后我们就能用这样的方式来创建我们想要的东西，而不用每次都分开。
	test(new FabriqueSequenceListe())
	比如这儿我要创建Liste的Sequence 我就声明一个新的这个类的对象
	test(FabriqueSequence s)
		
		Sequence s1
		s1 = s.nouvelle();
		
后面学的是singleton pattern模式
意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

主要解决：一个全局使用的类频繁地创建与销毁。

何时使用：当您想控制实例数目，节省系统资源的时候。
如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。

Logger properties

一个Configuration类
构造方法
private Configuration() {
先加载配置文件default.cfg
后面再用logger做一些打印处理
最后根据我们获取的属性 来进行不同的处理，比如是声明一个新的tableau 还是一个新的Liste
}
	
		private static Configuration instance = null;
		public static Configuration instance() {
			if(instance == null) {
				instance  = new Configuration();
			}
			return instance;
	}
	这样就能保证你只会有一个实例
	
	
泛型：
定我们有这样一个需求：写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，该如何实现？

答案是可以使用 Java 泛型。

使用 Java 泛型的概念，我们可以写一个泛型方法来对一个对象数组排序。然后，调用该泛型方法来对整型数组、浮点数数组、字符串数组等进行排序。
你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。
